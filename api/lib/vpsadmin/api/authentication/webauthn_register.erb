<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.8/css/all.css">
    <title>vpsAdmin Passkey Registration</title>
    <style>
      body { margin-top: 40px; }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="row align-items-center">
        <div class="col-sm-6 col-lg-4 mx-auto">
          <div class="card">
            <article class="card-body">
              <img src="<%= logo_url %>" class="card-img-top" alt="vpsFree.cz">
              <h4 class="card-title text-center mb-4 mt-1">Register passkey into vpsAdmin</h4>
              <hr>
              <div id="alert-area"></div>
              <form onsubmit="onFormSubmit(event);">
                <div class="form-group">
                  <div class="input-group">
                    <div class="input-group-prepend">
                      <span class="input-group-text"> <i class="fa fa-tag"></i> </span>
                    </div>
                     <input type="text" class="form-control" name="label" id="labelInput" placeholder="Label" minlength="3" autofocus>
                  </div>
                </div>

                <div class="form-group">
                  <input type="submit" class="btn btn-primary btn-block" name="register" id="registerBtn" value="Register">
                </div>

                <div class="form-group text-center">
                  <input type="submit" class="btn btn-outline-secondary btn-sm" name="cancel" value="Cancel">
                </div>
              </form>
            </article>
          </div>
        </div>
      </div>
    </div>

    <script type="text/javascript">
      function bufferDecode(value) {
        return Uint8Array.from(atob(value.replace(/_/g, '/').replace(/-/g, '+')), c => c.charCodeAt(0));
      }

      function bufferEncode(value) {
        return btoa(String.fromCharCode.apply(null, new Uint8Array(value)))
          .replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
      }

      async function registerCredential(label) {
        if (navigator.credentials === undefined) {
          reportAlert('danger', 'Credentials are not available.');
          return;
        }

        const resp1 = await fetch('/webauthn/registration/begin?access_token=<%= access_token %>', {
          method: 'POST'
        });
        const resp1Json = await resp1.json();
        const options = resp1Json.response.registration.options;

        options.challenge = bufferDecode(options.challenge);
        options.user.id = bufferDecode(options.user.id);
        options.excludeCredentials.forEach((cred) => cred.id = bufferDecode(cred.id));

        var credential;

        try {
          credential = await navigator.credentials.create({ publicKey: options });
        } catch (error) {
          reportAlert('danger', 'Failed to register new passkey: ' + error.message);
          return;
        }

        const rawId = bufferEncode(credential.rawId);
        const attestationObject = bufferEncode(credential.response.attestationObject);
        const clientDataJSON = bufferEncode(credential.response.clientDataJSON);

        const data = {
          registration: {
            challenge_token: resp1Json.response.registration.challenge_token,
            label: label,
            public_key_credential: {
              id: credential.id,
              rawId: rawId,
              type: credential.type,
              response: {
                attestationObject: attestationObject,
                clientDataJSON: clientDataJSON
              }
            }
          }
        };

        const resp2 = await fetch('/webauthn/registration/finish?access_token=<%= access_token %>', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data)
        });

        if (resp2.ok) {
          const resp2Json = await resp2.json();

          if (resp2Json.status) {
            reportAlert('success', 'Passkey registered.');
          } else {
            reportAlert('danger', 'Failed to register passkey: ' + resp2Json.message);
          }
        } else {
          const errText = await resp2.text();
          reportAlert('danger', 'Failed to register passkey: ' + errText);
        }
      }

      function reportAlert(klass, message) {
        document.getElementById('alert-area').innerHTML = `
          <div class="alert alert-${klass}" role="alert">
            ${message}
            <br><br>
            Redirecting back to vpsAdmin.
          </div>
        `;

        redirectUser(klass == 'success', message);
      }

      function redirectUser (status, message) {
        const url = new URL('<%= redirect_uri %>');

        url.searchParams.set('registerStatus', status ? '1' : '0');
        url.searchParams.set('registerMessage', message);

        window.location.href = url.toString();
      }

      function onFormSubmit (event) {
        event.preventDefault();

        const clickedButton = event.submitter;

        if (clickedButton.name == 'register') {
          const regButton = document.getElementById('registerBtn');
          regButton.disabled = true;
          regButton.value = 'Registering...';

          registerCredential(document.getElementById('labelInput').value);
        } else if (clickedButton.name == 'cancel') {
          redirectUser(false, 'Registration cancelled.');
        }
      }
    </script>
  </body>
</html>
